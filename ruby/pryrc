# -*-Ruby-*-
# frozen_string_literal: true

Pry.editor = 'vim'

def with_gem(gem)
  require gem.to_s
  yield if block_given?
rescue LoadError
  puts "gem install #{gem}  # <-- highly recommended"
end

with_gem 'pry-byebug' do
  if defined?(PryByebug)
    Pry.commands.alias_command 'c', 'continue'
    Pry.commands.alias_command 's', 'step'
    Pry.commands.alias_command 'n', 'next'
    Pry.commands.alias_command 'f', 'finish'
  end
end

with_gem 'awesome_print' do
  # The following line enables awesome_print for all pry output,
  # and it also enables paging
  Pry.config.print = proc { |output, value|
    Pry::Helpers::BaseHelpers.stagger_output("=> #{value.ai}", output)
  }

  # If you want awesome_print without automatic pagination, use the line below
  # Pry.config.print = proc { |output, value|
  #   output.puts value.ai
  # }
end

# === CONVENIENCE METHODS ===
# Stolen from https://gist.github.com/807492
# Use Array.toy or Hash.toy to get an array or hash to play with
class Array
  def self.toy(num = 10, &block)
    block_given? ? Array.new(num, &block) : Array.new(num) { |i| i + 1 }
  end
end

# Monkey patch `Hash` class to add Hash.toy
class Hash
  def self.toy(num = 10)
    Hash[Array.toy(num).zip(Array.toy(num) { |c| (96 + (c + 1)).chr })]
  end
end

def time
  start = Time.now
  yield if block_given?
  (Time.now - start) * 1_000
end

def times(samples = 1_000)
  durations = samples.times.inject([]) do |acc, _|
    acc << time { yield }
  end
  mean = durations.reduce(:+) / durations.size.to_f
  mean_square = durations.map { |n| n * n }.reduce(:+) / durations.size.to_f
  { samples: samples,
    mean: mean,
    mean_square: mean_square,
    variance: (mean_square - (mean * mean)) }
end
