# -*-Ruby-*-
# frozen_string_literal: true

Pry.editor = 'vim'

# Customize prompt to show Ruby version
Pry.config.prompt = Pry::Prompt.new(
  'custom',
  'Custom prompt with Ruby version',
  [
    proc { |obj, nest_level, _pry_| "\e[31m[ruby #{RUBY_VERSION}]\e[0m #{obj}:#{nest_level}> " },
    proc { |obj, nest_level, _pry_| "\e[31m[ruby #{RUBY_VERSION}]\e[0m #{obj}:#{nest_level}* " }
  ]
)

# Load optional gems and configure Pry accordingly

def with_gem(gem)
  require gem.to_s
  yield if block_given?
rescue LoadError
  puts "gem install #{gem}  # <-- highly recommended"
end

# Configure Pry with pry-byebug and awesome_print if available

with_gem 'pry-byebug' do
  # Hit Enter to repeat last command
  Pry::Commands.command(/^$/, 'repeat last command') do
    pry_instance.run_command Pry.history.to_a.last
  end
end

with_gem 'awesome_print' do
  AwesomePrint.pry!
end

# Convenience methods for testing Arrays and Hashes
# Stolen from https://gist.github.com/lucapette/807492

# Use Array.toy or Hash.toy to get an array or hash to play with
class Array
  def self.toy(num = 10, &block)
    block_given? ? Array.new(num, &block) : Array.new(num) { |i| i + 1 }
  end
end

# Monkey patch `Hash` class to add Hash.toy
class Hash
  def self.toy(num = 10)
    Hash[Array.toy(num).zip(Array.toy(num) { |c| (96 + (c + 1)).chr })]
  end
end

# Convenience method for timing blocks

def time
  start = Time.now
  yield if block_given?
  (Time.now - start) * 1_000
end

def times(samples = 1_000, &block)
  durations = samples.times.inject([]) do |acc, _|
    acc << time(&block)
  end
  mean = durations.reduce(:+) / durations.size.to_f
  mean_square = durations.map { |n| n * n }.reduce(:+) / durations.size.to_f
  { samples: samples,
    mean: mean,
    mean_square: mean_square,
    variance: (mean_square - (mean * mean)) }
end
